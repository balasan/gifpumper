// Generated by CoffeeScript 1.3.3
(function() {
  "use strict";

  var app;

  app = angular.module("gifpumper");

  app.directive("element", [
    '$document', function($document) {
      return {
        link: function(scope, el, att) {
          var angleX, angleY, angleZ, elHeight, elWidth, elX, elY, elZ, mousemove, mouseup, startX, startY;
          startX = startY = elWidth = elHeight = elX = elY = elZ = 0;
          angleX = angleY = angleZ = 0;
          el.on('mousedown', function(e) {
            var angelZ, startXT, startZT;
            if (scope.$parent.selected === scope.$index) {
              scope.$parent.selected = null;
            } else {
              scope.$parent.selected = scope.$index;
            }
            if (scope.el.contentType === "image") {
              e.preventDefault();
            }
            elWidth = el.width();
            elHeight = el.height();
            elX = parseInt(scope.el.left);
            elY = parseInt(scope.el.top);
            elZ = scope.el.z;
            angleX = scope.el.anglex;
            angleY = scope.el.angley;
            angelZ = scope.el.angler;
            startX = e.pageX;
            startY = e.pageY;
            if (scope.el.d2d) {
              startXT = startX;
              startZT = 0;
            }
            $document.on('mousemove', mousemove);
            $document.on('mouseup', mouseup);
            return scope.$apply();
          });
          mousemove = function(e) {
            var x, xT, xt, y, yT, zT, zt;
            x = e.pageX - startX;
            y = e.pageY - startY;
            e.preventDefault();
            if (e.shiftKey) {
              scope.el.width = x + elWidth + 'px';
              scope.el.height = y + elHeight + 'px';
            } else if (e.altKey && !scope.el.d2d) {
              zT = Math.cos(scope.mt.rotY * Math.PI / 180) * y + elZ;
              xT = -Math.sin(scope.mt.rotY * Math.PI / 180) * y + elX;
              scope.el.left = xT + "px";
              scope.el.z = zT;
            } else if (scope.keys.x) {
              scope.el.anglex = angleX + x / 5;
              scope.el.angley = angleY + y / 5;
            } else if (scope.keys.z) {
              scope.el.angler = angleZ + x / 5;
            } else {
              yT = e.pageY - startY + elY;
              xT = Math.cos(scope.mt.rotY * Math.PI / 180) * x + elX;
              zT = Math.sin(scope.mt.rotY * Math.PI / 180) * x + elZ;
              if (scope.el.d2d) {
                xt = e.pageX - startX;
                zt = scope.el.z;
              }
              scope.el.top = yT + "px";
              scope.el.left = xT + "px";
              scope.el.z = zT;
            }
            scope.$parent.selected = scope.$index;
            return scope.$apply();
          };
          return mouseup = function() {
            $document.unbind("mousemove", mousemove);
            $document.unbind("mouseup", mouseup);
            return scope.editElement();
          };
        }
      };
    }
  ]);

  app.directive("appBackground", [
    '$document', '$filter', function($document, $filter) {
      return {
        link: function(scope, el, att) {
          var body;
          body = $document[0].body;
          return scope.$watch('pageData', function(newV, oldV) {
            var b, style, _results;
            if (newV !== oldV) {
              style = $filter('bgFilter')(scope.pageData);
              body.style.backgroundColor = style.backgroundColor;
              body.style.backgroundImage = style.backgroundImage;
              body.style.backgroundSize = style.backgroundSize;
              b = 0;
              _results = [];
              while (b < style.backgroundGradient.length) {
                body.style.backgroundImage = style.backgroundGradient[b];
                _results.push(b++);
              }
              return _results;
            }
          });
        }
      };
    }
  ]);

  app.directive("page", [
    '$document', function($document) {
      return {
        templateUrl: '/partials/element',
        link: function(scope, el, att) {
          scope.keys = {};
          scope.mt = {};
          scope.mt.rotY = 0;
          scope.mt.rotX = 0;
          scope.mt.rotZ = 0;
          $document.on('keydown', function(e) {
            switch (e.which) {
              case 90:
                return scope.keys.z = true;
              case 88:
                return scope.keys.x = true;
              case 32:
                return scope.keys.space = true;
              case 17:
                return scope.keys.cntrl = true;
            }
          });
          $document.on('keyup', function(e) {
            switch (e.which) {
              case 90:
                return scope.keys.z = false;
              case 88:
                return scope.keys.x = false;
              case 32:
                return scope.keys.space = false;
              case 17:
                return scope.keys.cntrl = false;
            }
          });
          return scope.$on('$destroy', function() {
            $document.unbind('keydown');
            return $document.unbind('keyup');
          });
        }
      };
    }
  ]);

  app.directive("embedSrc", function() {
    return {
      restrict: "A",
      link: function(scope, element, attrs) {
        var current;
        current = element;
        return scope.$watch((function() {
          return attrs.embedSrc;
        }), function() {
          var clone;
          clone = element.clone().attr("src", attrs.embedSrc);
          current.replaceWith(clone);
          return current = clone;
        });
      }
    };
  });

  app.directive("soundcloud", [
    "$timeout", "$http", function($timeout, $http) {
      return {
        link: function(scope, element, attrs) {
          var url;
          if (!scope.el.content.match('object') && !scope.el.content.match('iframe')) {
            url = "http://soundcloud.com/oembed/?format=json&url=" + scope.el.content + "&iframe=true";
            $http({
              method: 'GET',
              url: url,
              cache: true
            }).then(function(result) {
              return scope.el.content = result.data.html;
            });
          }
          return $timeout(function() {
            return element.children().width('100%').height('100%');
          }, 4000);
        }
      };
    }
  ]);

  app.directive("infinite", [
    '$window', function($window) {
      return {
        link: function(scope, el, att) {
          var $$window, scrollDistance;
          scrollDistance = 100;
          $$window = angular.element(window);
          $$window.on('scroll', function(event) {
            var elementBottom, remaining, windowBottom;
            if (scope.scroll) {
              windowBottom = $$window.innerHeight() + $$window.scrollTop();
              elementBottom = el[0].offsetTop + el.innerHeight();
              remaining = elementBottom - windowBottom;
              if (remaining <= scrollDistance) {
                scope.scroll = false;
                return scope.getNextPage();
              }
            }
          });
          return scope.$on('$destroy', function() {
            return $$window.unbind('scroll');
          });
        }
      };
    }
  ]);

  app.directive("feed", [
    function() {
      return {
        templateUrl: '/partials/feed'
      };
    }
  ]);

  app.directive("gallery", [
    '$window', function($window) {
      return {
        templateUrl: '/partials/gallery'
      };
    }
  ]);

  app.directive("appVersion", [
    "version", function(version) {
      return function(scope, elm, attrs) {
        return elm.text(version);
      };
    }
  ]);

}).call(this);
